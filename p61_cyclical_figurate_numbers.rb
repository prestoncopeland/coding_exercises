=begin
Preston Copeland
September 17, 2015
Project Euler

Problem 61: Cyclical Figurate Numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle      P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square      P4,n=n2       1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n−1)      1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n−2)      1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

=end



def find_cyclical
  squares = (32..99).to_a.map {|v| v**2}
  triangles = (45..140).to_a.map {|v| (v*(v+1))/2}
  pents = (26..81).to_a.map {|v| (v*(3*v-1))/2}
  hexs = (23..70).to_a.map {|v| v*(2*v-1)}
  heps = (21..63).to_a.map {|v| (v*(5*v-3))/2}
  octs = (19..58).to_a.map {|v| v*(3*v-2)}

  polygonals = [squares, triangles, pents, hexs, heps, octs]
  cyclicals = []
  p = nil

    i = 0
    polygonals[i].each do |number|
      (i+1...polygonals.size).each do |j|
        p = polygonals[j].select {|n| n/100 == number%100}
        unless p.empty?
          cyclicals << number
          cyclicals << p[0]
          polygonals.delete_at(i)
          polygonals.delete_at(j)
          break
        end
      end
      break
    end

    p = p[0]
    polygonals.each_with_index do |poly, i|
      q = poly.select {|n| n/100 == p%100}
      unless q.empty?
        cyclicals << q[0]
        polygonals.delete_at(i)
        p = q[0]
        break
      end
    end

end

