#Scott Copeland
#Project Euler 12: Highly divisible triangular number
#February 5, 2015

=begin
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end

=begin
Algorithm
1. make function to calculate factors of a number. (Enum)
2. make function to calculate triangle numbers. (lazy Enum)
3. use lazy evaluation to get over-five-hundred-divisors triangle number.
=end

def Integer.triangle_numbers
   Enumerator.new do |yielder|
                        number = 0
                        count = 1
                        loop do
                          number += count
                          count += 1
                          yielder.yield number
                        end
                  end.lazy
end

def factors(number)
  count = 0
  (1..number).each do |x|
    count += 1 if (number % x) == 0
  end
  count
end









